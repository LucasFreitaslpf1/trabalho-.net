@page "/postagem"
@using Dados;
@using Services;
@using Autenticacao;
@inherits OwningComponentBase<PostagemService>
@inject UsuarioService usuarioService;
@inject AuthenticationStateProvider authStateProvider

<style>
    .autor {
        font-style: italic;
    }

    .conteudo {
        border: 2px solid #000;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        padding-left: 50px;
        font-size: 20px;
    }

    .postagens {
        margin-top: 30px;
    }

    .post {
        padding-top: 10px;
        border-bottom: 1px solid #000;
        padding: 10px;
    }

    .datahora {
        text-align: right;
        color: gray;
    }
</style>

<h3>Postagem</h3>
<EditForm Model="@postagem" OnValidSubmit="@salvar">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="texto">Texto </label>
        <InputText id="texto" class="form-control" @bind-Value=postagem.texto />
        <input type="submit" class="btn btn-success" value="Salvar" />
    </div>
</EditForm>

<div class="postagens">
    @foreach (var post in PostList)
    {
        <div class="post">
            <h3 class="autor">@usuarioService.getUsuarioById(@post.usuario_id).nome</h3>
            <p class="conteudo">@post.texto</p>
            <p class="datahora">@post.datahora</p>
        </div>
    }
</div>
@* <table class="table">
<tr>
<th>Id</th>
<th>Texto</th>
<th>Quando</th>
<th>Autor</th>
</tr>
@foreach (var post in PostList)
{
<tr>
<td>
@post.id
</td>
<td>
@post.texto
</td>
<td>
@post.datahora
</td>
<td>
@usuarioService.getUsuarioById(@post.usuario_id).nome
</td>
</tr>
}
</table> *@

@code {
    Postagem postagem = new();

    IList<Postagem> PostList;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string userName;

    private async Task salvar()
    {
        postagem.datahora = DateTime.Now;
        postagem.usuario_id = getUserId();

        try
        {
            if (postagem.id == 0)
            {
                await Service.InsertPostagem(postagem);
            }
            else
            {
                await Service.UpdatePostagem(postagem);
            }
            postagem = new();
            updateList();
        }
        catch (Exception E)
        {
            Console.WriteLine(E.Message);
        }
    }

    private void updateList()
    {
        PostList = Service.getAllPostagem();
    }

    protected override async void OnInitialized()
    {
        PostList = Service.getAllPostagem();
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity.Name;
    }

    private int getUserId()
    {
        var user = usuarioService.getUsuarioByNome(userName);
        return user.id;
    }
}
